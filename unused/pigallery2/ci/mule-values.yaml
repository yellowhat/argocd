---
ingress:
  enabled: true
  ingressClassName: cilium
  annotations:
    kubernetes.io/tls-acme: "true"
  hosts:
    - host: photo.mukka.haus
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: photo-tls
      hosts:
        - photo.mukka.haus

persistence:
  data:
    enabled: true
    mountPath: /data
    storageClassName: pigallery2
    accessModes:
      - ReadWriteOnce
    size: 10Gi
  images:
    enabled: true
    mountPath: /images
    readOnly: true
    storageClassName: photo
    accessModes:
      - ReadWriteOnce
    size: 100Gi

extraManifests:
  - apiVersion: cilium.io/v2
    kind: CiliumNetworkPolicy
    metadata:
      name: restrict
    spec:
      # Apply to all pods in namespacee
      endpointSelector: {}
      # Allow ingress from anywhere
      egress:
        # Allow to resolve DNS to run tests
        - toEndpoints:
            - matchLabels:
                io.kubernetes.pod.namespace: kube-system
                k8s-app: kube-dns
          toPorts:
            - ports:
                - port: "53"
                  protocol: UDP
              rules:
                dns:
                  - matchPattern: "*"
        # Allow to run tests (egress to all pods in namespace)
        - toEndpoints:
            - {}

  - apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: pigallery2
    provisioner: kubernetes.io/no-provisioner
    volumeBindingMode: WaitForFirstConsumer

  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: pigallery2
      labels:
        type: local
    spec:
      storageClassName: pigallery2
      capacity:
        storage: 10Gi
      accessModes:
        - ReadWriteOnce
      local:
        path: /data/pigallery2
      nodeAffinity:
        required:
          nodeSelectorTerms:
            - matchExpressions:
                - key: disk
                  operator: In
                  values:
                    - local

  - apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: photo
    provisioner: kubernetes.io/no-provisioner
    volumeBindingMode: WaitForFirstConsumer

  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: photo
      labels:
        type: local
    spec:
      storageClassName: photo
      capacity:
        storage: 100Gi
      accessModes:
        - ReadWriteOnce
      local:
        path: /data/photo
      nodeAffinity:
        required:
          nodeSelectorTerms:
            - matchExpressions:
                - key: disk
                  operator: In
                  values:
                    - local
