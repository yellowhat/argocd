---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pihole.fullname" . }}
  labels:
    {{- include "pihole.labels" . | nindent 4 }}
  annotations:
    ignore-check.kube-linter.io/no-read-only-root-fs: "Required to write"
    ignore-check.kube-linter.io/privileged-ports: "Required by docker image"
    ignore-check.kube-linter.io/read-secret-from-env-var: "Required by docker image"
    ignore-check.kube-linter.io/run-as-non-root: "Required by docker image"
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: {{ .Values.strategyType }}
    {{- if eq .Values.strategyType "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
    {{- end }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{- include "pihole.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.adlists }}
        checksum/configmap-adlists: {{ include (print $.Template.BasePath "/configmap-adlists.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.blacklist }}
        checksum/configmap-blacklist: {{ include (print $.Template.BasePath "/configmap-blacklist.yaml") . | sha256sum }}
        {{- end }}
        {{- if and (.Values.dnscrypt.enabled) (.Values.dnscrypt.config) }}
        checksum/configmap-dnscrypt: {{ include (print $.Template.BasePath "/configmap-dnscrypt.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.regex }}
        checksum/configmap-regex: {{ include (print $.Template.BasePath "/configmap-regex.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.dnsmasq.staticDhcpEntries }}
        checksum/configmap-static-dhcp: {{ include (print $.Template.BasePath "/configmap-static-dhcp.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.whitelist }}
        checksum/configmap-whitelist: {{ include (print $.Template.BasePath "/configmap-whitelist.yaml") . | sha256sum }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "pihole.selectorLabels" . | nindent 8 }}
    spec:
      automountServiceAccountToken: false
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.antiaff.enabled }}
      affinity:
        podAntiAffinity:
        {{- if .Values.antiaff.strict }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
        {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
        {{- end }}
                matchExpressions:
                - key: release
                  operator: In
                  values:
                  - {{ .Values.antiaff.avoidRelease }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- if .Values.podDnsConfig.enabled }}
      dnsPolicy: {{ .Values.podDnsConfig.policy }}
      dnsConfig:
        nameservers:
          {{- toYaml .Values.podDnsConfig.nameservers | nindent 8 }}
      {{- end }}
      hostname: {{ .Values.hostname }}
      hostNetwork: {{ .Values.hostNetwork }}
      containers:
        {{- if .Values.dnscrypt.enabled }}
        - name: dnscrypt
          image: "{{ .Values.dnscrypt.image.repository }}:{{ .Values.dnscrypt.image.tag }}"
          imagePullPolicy: {{ .Values.dnscrypt.image.pullPolicy }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          ports:
            - name: dnscrypt-udp
              containerPort: 5053
              protocol: UDP
            - name: dnscrypt-tcp
              containerPort: 5053
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5053
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            tcpSocket:
              port: 5053
            initialDelaySeconds: 5
            periodSeconds: 10
          {{- if and (.Values.dnscrypt.enabled) (.Values.dnscrypt.config) }}
          volumeMounts:
            - name: dnscrypt-config
              mountPath: /config/dnscrypt-proxy.toml
              subPath: dnscrypt-proxy.toml
              readOnly: true
          {{- end }}
          {{- with .Values.dnscrypt.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.monitoring.sidecar.enabled }}
        - name: exporter
          image: "{{ .Values.monitoring.sidecar.image.repository }}:{{ .Values.monitoring.sidecar.image.tag }}"
          imagePullPolicy: {{ .Values.monitoring.sidecar.image.pullPolicy }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
            - name: PIHOLE_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PIHOLE_PORT
              value: "{{ .Values.webHttp }}"
            - name: PIHOLE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.admin.passwordKey | default "password" }}
                  name: {{ .Values.admin.existingSecret | default (include "pihole.password-secret" .) }}
          ports:
            - name: prometheus
              containerPort: {{ .Values.monitoring.sidecar.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /liveness
              port: {{ .Values.monitoring.sidecar.port }}
          readinessProbe:
            httpGet:
              path: /readiness
              port: {{ .Values.monitoring.sidecar.port }}
          {{- with .Values.monitoring.sidecar.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.monitoring.influxdb.enabled }}
        - name: influxdb
          image: "{{ .Values.monitoring.influxdb.image.repository }}:{{ .Values.monitoring.influxdb.image.tag }}"
          imagePullPolicy: {{ .Values.monitoring.influxdb.image.pullPolicy }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          env:
            - name: PIHOLE_URL
              value: "http://localhost:{{ .Values.webHttp }}"
            - name: PIHOLE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.admin.passwordKey | default "password" }}
                  name: {{ .Values.admin.existingSecret | default (include "pihole.password-secret" .) }}
            - name: PIHOLE_INTERVAL
              value: "30"
            {{- range $key, $value := .Values.monitoring.influxdb.envVars }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - ps -ef | grep pihole2influxdb | grep -v grep
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - ps -ef | grep pihole2influxdb | grep -v grep
          {{- with .Values.monitoring.influxdb.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.doh.enabled }}
        - name: cloudflared
          image: "{{ .Values.doh.repository }}:{{ .Values.doh.tag }}"
          imagePullPolicy: {{ .Values.doh.pullPolicy }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          {{- with .Values.doh.envVars }}
          env:
            {{- range $key, $value := . }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          ports:
            - containerPort: 5053
              name: cloudflared-udp
              protocol: UDP
            - containerPort: 49312
              name: cloudflared-met
              protocol: TCP
          {{- if .Values.doh.probes.liveness.enabled }}
          livenessProbe:
            {{- toYaml .Values.doh.probes.liveness.probe | indent 12 }}
            initialDelaySeconds: {{ .Values.doh.probes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.doh.probes.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.doh.probes.liveness.timeoutSeconds }}
          {{- end }}
          resources:
            limits:
              memory: 128Mi
        {{- end }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: dns
              containerPort: 53
              protocol: TCP
            {{- if .Values.dnsHostPort.enabled }}
              hostPort: {{ .Values.dnsHostPort.port }}
            {{- end }}
            - name: dns-udp
              containerPort: 53
              protocol: UDP
            {{- if .Values.dnsHostPort.enabled }}
              hostPort: {{ .Values.dnsHostPort.port }}
            {{- end }}
            - name: http
              containerPort: {{ .Values.webHttp }}
              protocol: TCP
            - name: https
              containerPort: {{ .Values.webHttps }}
              protocol: TCP
            - name: client-udp
              containerPort: 67
              protocol: UDP
          env:
            - name: WEB_PORT
              value: "{{ .Values.webHttp }}"
            - name: VIRTUAL_HOST
              value: {{ .Values.virtualHost }}
            - name: WEBPASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.admin.passwordKey | default "password" }}
                  name: {{ .Values.admin.existingSecret | default (include "pihole.password-secret" .) }}
            {{- range $key, $value := .Values.extraEnvVars }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value := .Values.extraEnvVarsSecret }}
            - name: {{ $key | quote }}
              valueFrom:
                secretKeyRef:
                  key: {{ $value.key | quote }}
                  name: {{ $value.name | quote }}
            {{- end }}
            {{- if .Values.doh.enabled }}
            - name: 'DNS1'
              value: "127.0.0.1#5053"
            - name: DNS2
              value: "127.0.0.1#5053"
            {{- else }}
            {{- if .Values.DNS1 }}
            - name: 'PIHOLE_DNS_'
              value: {{ if .Values.DNS2 }}{{ ( printf "%v;%v" .Values.DNS1 .Values.DNS2 ) | squote }}{{ else }}{{ .Values.DNS1 | squote }}{{ end }}
            {{- end }}
            {{- end }}
            {{- range $key, $value := .Values.ftl }}
            - name: 'FTLCONF_{{ $key }}'
              value: {{ $value | quote }}
            {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /admin
              port: {{ .Values.probes.liveness.port }}
              scheme: {{ .Values.probes.liveness.scheme }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /admin
              port: {{ .Values.probes.readiness.port }}
              scheme: {{ .Values.probes.readiness.scheme }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/pihole
              {{- with .Values.persistence.subPath }}
              subPath: {{ . }}
              {{- end }}
            - name: custom-dnsmasq
              mountPath: /etc/dnsmasq.d/02-custom.conf
              subPath: 02-custom.conf
            - name: custom-dnsmasq
              mountPath: /etc/addn-hosts
              subPath: addn-hosts
            - name: custom-dnsmasq
              mountPath: /etc/dnsmasq.d/05-pihole-custom-cname.conf
              subPath: 05-pihole-custom-cname.conf
            {{- if .Values.adlists }}
            - name: adlists
              mountPath: /etc/pihole/adlists.list
              subPath: adlists.list
            {{- end }}
            {{- if .Values.blacklist }}
            - name: blacklist
              mountPath: /etc/pihole/blacklist.txt
              subPath: blacklist.txt
            {{- end }}
            {{- if .Values.regex }}
            - name: regex
              mountPath: /etc/pihole/regex.list
              subPath: regex.list
            {{- end }}
            {{- if .Values.whitelist }}
            - name: whitelist
              mountPath: /etc/pihole/whitelist.txt
              subPath: whitelist.txt
            {{- end }}
            {{- if .Values.dnsmasq.staticDhcpEntries }}
            - name: static-dhcp
              mountPath: /etc/dnsmasq.d/04-pihole-static-dhcp.conf
              subPath: pihole-static-dhcp.conf
            {{- end }}
            {{- range $key, $value := .Values.extraVolumeMounts }}
            - name: {{ $key }}
              {{- toYaml $value | nindent 12 }}
            {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if and (.Values.dnscrypt.enabled) (.Values.dnscrypt.config) }}
        - name: dnscrypt-config
          configMap:
            name: {{ include "pihole.fullname" . }}-dnscrypt
        {{- end }}
        - name: config
          {{- if .Values.persistence.enabled }}
          persistence:
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "pihole.fullname" . }}{{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: custom-dnsmasq
          configMap:
            name: {{ template "pihole.fullname" . }}-custom-dnsmasq
            defaultMode: 420
        {{- if .Values.adlists }}
        - name: adlists
          configMap:
            name: {{ template "pihole.fullname" . }}-adlists
            defaultMode: 420
        {{- end }}
        {{- if .Values.whitelist }}
        - name: whitelist
          configMap:
            name: {{ template "pihole.fullname" . }}-whitelist
            defaultMode: 420
        {{- end }}
        {{- if .Values.dnsmasq.staticDhcpEntries }}
        - name: static-dhcp
          configMap:
            name: {{ template "pihole.fullname" . }}-static-dhcp
            defaultMode: 420
        {{- end }}
        {{- if .Values.blacklist }}
        - name: blacklist
          configMap:
            name: {{ template "pihole.fullname" . }}-blacklist
            defaultMode: 420
        {{- end }}
        {{- if .Values.regex }}
        - name: regex
          configMap:
            name: {{ template "pihole.fullname" . }}-regex
            defaultMode: 420
        {{- end }}
        {{- range $key, $value := .Values.extraVolumes }}
        - name: {{ $key }}
          {{- toYaml $value | nindent 8 }}
        {{- end }}
